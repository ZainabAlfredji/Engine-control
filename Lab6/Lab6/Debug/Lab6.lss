
Lab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00000b0a  00000b9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  00800134  00800134  00000bd2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000bd2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000c70  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016a7  00000000  00000000  00000dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ef0  00000000  00000000  00002467  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bf1  00000000  00000000  00003357  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000254  00000000  00000000  00003f48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000075a  00000000  00000000  0000419c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000686  00000000  00000000  000048f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004f7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__vector_29>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ea e0       	ldi	r30, 0x0A	; 10
  c0:	fb e0       	ldi	r31, 0x0B	; 11
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a4 33       	cpi	r26, 0x34	; 52
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a4 e3       	ldi	r26, 0x34	; 52
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a9 35       	cpi	r26, 0x59	; 89
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 00 01 	call	0x200	; 0x200 <main>
  e2:	0c 94 83 05 	jmp	0xb06	; 0xb06 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <delay_1_micros>:
	...
	NOP
	NOP
	NOP
	NOP
				
	RET
 102:	08 95       	ret

00000104 <delay_micros>:
	...
	NOP
	NOP
	NOP
	NOP
	NOP
	DEC R24
 11c:	8a 95       	dec	r24
	CPI R24, 0			; more loops to do?
 11e:	80 30       	cpi	r24, 0x00	; 0
	BRNE delay_micros	;	continue!
 120:	89 f7       	brne	.-30     	; 0x104 <delay_micros>
	RET
 122:	08 95       	ret

00000124 <delay_ms>:
;==============================================================================
; Delay of X ms
;	LDI + RCALL = 4 cycles
;==============================================================================
delay_ms:
	MOV R18, R24
 124:	28 2f       	mov	r18, r24

00000126 <loop_dms>:
loop_dms:
	LDI R24, 250	
 126:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 128:	ed df       	rcall	.-38     	; 0x104 <delay_micros>
	LDI R24, 250	
 12a:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 12c:	eb df       	rcall	.-42     	; 0x104 <delay_micros>
	LDI R24, 250	
 12e:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 130:	e9 df       	rcall	.-46     	; 0x104 <delay_micros>
	LDI R24, 250
 132:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_micros
 134:	e7 df       	rcall	.-50     	; 0x104 <delay_micros>
	
	DEC R18
 136:	2a 95       	dec	r18
	CPI R18, 0			; more loops to do?
 138:	20 30       	cpi	r18, 0x00	; 0
	BRNE loop_dms		;	continue!
 13a:	a9 f7       	brne	.-22     	; 0x126 <loop_dms>
	RET
 13c:	08 95       	ret

0000013e <delay_s>:

delay_s:
	MOV R18, R24
 13e:	28 2f       	mov	r18, r24

00000140 <delay_1_sek>:

delay_1_sek:
	PUSH R18
 140:	2f 93       	push	r18
	LDI R24, 250	
 142:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 144:	ef df       	rcall	.-34     	; 0x124 <delay_ms>
	LDI R24, 250	
 146:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 148:	ed df       	rcall	.-38     	; 0x124 <delay_ms>
	LDI R24, 250	
 14a:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 14c:	eb df       	rcall	.-42     	; 0x124 <delay_ms>
	LDI R24, 250	
 14e:	8a ef       	ldi	r24, 0xFA	; 250
	RCALL delay_ms
 150:	e9 df       	rcall	.-46     	; 0x124 <delay_ms>

	POP R18
 152:	2f 91       	pop	r18
	DEC R18
 154:	2a 95       	dec	r18
	CPI R18, 0
 156:	20 30       	cpi	r18, 0x00	; 0
	BRNE delay_1_sek	
 158:	99 f7       	brne	.-26     	; 0x140 <delay_1_sek>
 15a:	08 95       	ret

0000015c <hmi_init>:
		// convert number!
		str_to_uint16(numbers, length, p_int_nr);
	}
	// return the number of digits
	return length;
}
 15c:	0e 94 f6 01 	call	0x3ec	; 0x3ec <numkey_init>
 160:	0e 94 8d 01 	call	0x31a	; 0x31a <lcd_init>
 164:	08 95       	ret

00000166 <output_msg>:
 *	p_str1: pointer to first character of the string.
 *	p_str2: pointer to first character of the string.
 *  delay_after_msg: number of seconds to wait after message is shown.
 */
void output_msg(char *p_str1, char *p_str2, uint8_t delay_after_msg)
{
 166:	ef 92       	push	r14
 168:	ff 92       	push	r15
 16a:	0f 93       	push	r16
 16c:	1f 93       	push	r17
 16e:	cf 93       	push	r28
 170:	7c 01       	movw	r14, r24
 172:	8b 01       	movw	r16, r22
 174:	c4 2f       	mov	r28, r20
	lcd_set_cursor_mode(CURSOR_OFF);
 176:	8c e0       	ldi	r24, 0x0C	; 12
 178:	0e 94 87 01 	call	0x30e	; 0x30e <lcd_set_cursor_mode>
	lcd_clear();
 17c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_clear>
	lcd_write_str(p_str1);
 180:	c7 01       	movw	r24, r14
 182:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_write_str>
	lcd_set_cursor_pos(1, 0);
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	0e 94 bd 01 	call	0x37a	; 0x37a <lcd_set_cursor_pos>
	lcd_write_str(p_str2);
 18e:	c8 01       	movw	r24, r16
 190:	0e 94 c7 01 	call	0x38e	; 0x38e <lcd_write_str>
	if(delay_after_msg > 0) {
 194:	cc 23       	and	r28, r28
 196:	19 f0       	breq	.+6      	; 0x19e <output_msg+0x38>
		delay_s(delay_after_msg);
 198:	8c 2f       	mov	r24, r28
 19a:	0e 94 9f 00 	call	0x13e	; 0x13e <delay_s>
	}
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	ff 90       	pop	r15
 1a6:	ef 90       	pop	r14
 1a8:	08 95       	ret

000001aa <buttonPressed>:
	/*
	*Reads key. If key for current_state is pressed, ignore.	
	*/
state_t buttonPressed()
{
	key = numkey_read();
 1aa:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <numkey_read>
 1ae:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <key>
	if(key == '1' && current_state != MOTOR_OFF)
 1b2:	81 33       	cpi	r24, 0x31	; 49
 1b4:	21 f4       	brne	.+8      	; 0x1be <buttonPressed+0x14>
 1b6:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <current_state>
 1ba:	91 11       	cpse	r25, r1
 1bc:	1b c0       	rjmp	.+54     	; 0x1f4 <buttonPressed+0x4a>
	{				
		return MOTOR_OFF;   			   		   
    }
	else if(key == '2' && current_state != MOTOR_ON &&
 1be:	82 33       	cpi	r24, 0x32	; 50
 1c0:	61 f4       	brne	.+24     	; 0x1da <buttonPressed+0x30>
 1c2:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <current_state>
 1c6:	81 30       	cpi	r24, 0x01	; 1
 1c8:	41 f0       	breq	.+16     	; 0x1da <buttonPressed+0x30>
			reg_power_read() == 0 &&
 1ca:	0e 94 52 02 	call	0x4a4	; 0x4a4 <reg_power_read>
	key = numkey_read();
	if(key == '1' && current_state != MOTOR_OFF)
	{				
		return MOTOR_OFF;   			   		   
    }
	else if(key == '2' && current_state != MOTOR_ON &&
 1ce:	81 11       	cpse	r24, r1
 1d0:	04 c0       	rjmp	.+8      	; 0x1da <buttonPressed+0x30>
			reg_power_read() == 0 &&
			current_state != MOTOR_RUNNING)
 1d2:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <current_state>
	if(key == '1' && current_state != MOTOR_OFF)
	{				
		return MOTOR_OFF;   			   		   
    }
	else if(key == '2' && current_state != MOTOR_ON &&
			reg_power_read() == 0 &&
 1d6:	82 30       	cpi	r24, 0x02	; 2
 1d8:	79 f4       	brne	.+30     	; 0x1f8 <buttonPressed+0x4e>
			current_state != MOTOR_RUNNING)
	{
		return MOTOR_ON;						   
	}		   
	else if(reg_power_read() > 0 && current_state != MOTOR_OFF && current_state != MOTOR_RUNNING)
 1da:	0e 94 52 02 	call	0x4a4	; 0x4a4 <reg_power_read>
 1de:	88 23       	and	r24, r24
 1e0:	31 f0       	breq	.+12     	; 0x1ee <buttonPressed+0x44>
 1e2:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <current_state>
 1e6:	88 23       	and	r24, r24
 1e8:	11 f0       	breq	.+4      	; 0x1ee <buttonPressed+0x44>
 1ea:	82 30       	cpi	r24, 0x02	; 2
 1ec:	39 f4       	brne	.+14     	; 0x1fc <buttonPressed+0x52>
	{
		return MOTOR_RUNNING;						   
	}
	return current_state;
 1ee:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <current_state>
 1f2:	08 95       	ret
state_t buttonPressed()
{
	key = numkey_read();
	if(key == '1' && current_state != MOTOR_OFF)
	{				
		return MOTOR_OFF;   			   		   
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	08 95       	ret
    }
	else if(key == '2' && current_state != MOTOR_ON &&
			reg_power_read() == 0 &&
			current_state != MOTOR_RUNNING)
	{
		return MOTOR_ON;						   
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	08 95       	ret
	}		   
	else if(reg_power_read() > 0 && current_state != MOTOR_OFF && current_state != MOTOR_RUNNING)
	{
		return MOTOR_RUNNING;						   
 1fc:	82 e0       	ldi	r24, 0x02	; 2
	}
	return current_state;
}
 1fe:	08 95       	ret

00000200 <main>:

//The keys 1, 2 should be used to change state. The different states can be seen on lab instruction

int main(void)
{	
	hmi_init();
 200:	0e 94 ae 00 	call	0x15c	; 0x15c <hmi_init>
	reg_init();
 204:	0e 94 2f 02 	call	0x45e	; 0x45e <reg_init>
	motor_init();
 208:	0e 94 d5 01 	call	0x3aa	; 0x3aa <motor_init>
	//Create a variable that takes 	
	//NO_KEY should never change state, nor if same button as current state has been pressed
	current_state = MOTOR_OFF;
 20c:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <current_state>
		
    while (1) 
    {			
		switch(current_state) {
 210:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <current_state>
 214:	81 30       	cpi	r24, 0x01	; 1
 216:	89 f0       	breq	.+34     	; 0x23a <main+0x3a>
 218:	18 f0       	brcs	.+6      	; 0x220 <main+0x20>
 21a:	82 30       	cpi	r24, 0x02	; 2
 21c:	c1 f0       	breq	.+48     	; 0x24e <main+0x4e>
 21e:	24 c0       	rjmp	.+72     	; 0x268 <main+0x68>
			
			case MOTOR_OFF:				
				sprintf(mode_str, "MOTOR OFF");	
 220:	8a e0       	ldi	r24, 0x0A	; 10
 222:	e1 e0       	ldi	r30, 0x01	; 1
 224:	f1 e0       	ldi	r31, 0x01	; 1
 226:	a4 e3       	ldi	r26, 0x34	; 52
 228:	b1 e0       	ldi	r27, 0x01	; 1
 22a:	01 90       	ld	r0, Z+
 22c:	0d 92       	st	X+, r0
 22e:	8a 95       	dec	r24
 230:	e1 f7       	brne	.-8      	; 0x22a <main+0x2a>
				motor_speed_set(0);
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <motor_speed_set>
				break;
 238:	17 c0       	rjmp	.+46     	; 0x268 <main+0x68>
			
			case MOTOR_ON:			
				sprintf(mode_str, "MOTOR ON");
 23a:	89 e0       	ldi	r24, 0x09	; 9
 23c:	eb e0       	ldi	r30, 0x0B	; 11
 23e:	f1 e0       	ldi	r31, 0x01	; 1
 240:	a4 e3       	ldi	r26, 0x34	; 52
 242:	b1 e0       	ldi	r27, 0x01	; 1
 244:	01 90       	ld	r0, Z+
 246:	0d 92       	st	X+, r0
 248:	8a 95       	dec	r24
 24a:	e1 f7       	brne	.-8      	; 0x244 <main+0x44>
				break;
 24c:	0d c0       	rjmp	.+26     	; 0x268 <main+0x68>
				
			case MOTOR_RUNNING:
				motor_speed_set(reg_power_read());
 24e:	0e 94 52 02 	call	0x4a4	; 0x4a4 <reg_power_read>
 252:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <motor_speed_set>
				sprintf(mode_str, "Motor running");
 256:	8e e0       	ldi	r24, 0x0E	; 14
 258:	e4 e1       	ldi	r30, 0x14	; 20
 25a:	f1 e0       	ldi	r31, 0x01	; 1
 25c:	a4 e3       	ldi	r26, 0x34	; 52
 25e:	b1 e0       	ldi	r27, 0x01	; 1
 260:	01 90       	ld	r0, Z+
 262:	0d 92       	st	X+, r0
 264:	8a 95       	dec	r24
 266:	e1 f7       	brne	.-8      	; 0x260 <main+0x60>
						
				break;			
		}
		sprintf(reg_str, "%u%c", reg_power_read(), '%');
 268:	0e 94 52 02 	call	0x4a4	; 0x4a4 <reg_power_read>
 26c:	1f 92       	push	r1
 26e:	95 e2       	ldi	r25, 0x25	; 37
 270:	9f 93       	push	r25
 272:	1f 92       	push	r1
 274:	8f 93       	push	r24
 276:	82 e2       	ldi	r24, 0x22	; 34
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	9f 93       	push	r25
 27c:	8f 93       	push	r24
 27e:	88 e4       	ldi	r24, 0x48	; 72
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	9f 93       	push	r25
 284:	8f 93       	push	r24
 286:	0e 94 99 02 	call	0x532	; 0x532 <sprintf>
		output_msg(mode_str, reg_str, 0); // writes out Temperature on first row, actual temp on second row		
 28a:	40 e0       	ldi	r20, 0x00	; 0
 28c:	68 e4       	ldi	r22, 0x48	; 72
 28e:	71 e0       	ldi	r23, 0x01	; 1
 290:	84 e3       	ldi	r24, 0x34	; 52
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	0e 94 b3 00 	call	0x166	; 0x166 <output_msg>
		current_state = buttonPressed();
 298:	0e 94 d5 00 	call	0x1aa	; 0x1aa <buttonPressed>
 29c:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <current_state>
    }	
 2a0:	8d b7       	in	r24, 0x3d	; 61
 2a2:	9e b7       	in	r25, 0x3e	; 62
 2a4:	08 96       	adiw	r24, 0x08	; 8
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	f8 94       	cli
 2aa:	9e bf       	out	0x3e, r25	; 62
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	8d bf       	out	0x3d, r24	; 61
 2b0:	af cf       	rjmp	.-162    	; 0x210 <main+0x10>

000002b2 <write_4bit_msb>:
 *	data: 4 bits of data
 */
static void write_4bit_msb(uint8_t data)
{
	//write data
	SET_BIT_LEVELS(PORTF, 0x0F, data);	
 2b2:	91 b3       	in	r25, 0x11	; 17
 2b4:	9f 70       	andi	r25, 0x0F	; 15
 2b6:	80 7f       	andi	r24, 0xF0	; 240
 2b8:	89 2b       	or	r24, r25
 2ba:	81 bb       	out	0x11, r24	; 17
	// generate pulse on the Enable pin
	SET_BIT(PORTD, 7);
 2bc:	8b b1       	in	r24, 0x0b	; 11
 2be:	80 68       	ori	r24, 0x80	; 128
 2c0:	8b b9       	out	0x0b, r24	; 11
	delay_1_micros();
 2c2:	0e 94 75 00 	call	0xea	; 0xea <delay_1_micros>
	CLR_BIT(PORTD, 7);
 2c6:	8b b1       	in	r24, 0x0b	; 11
 2c8:	8f 77       	andi	r24, 0x7F	; 127
 2ca:	8b b9       	out	0x0b, r24	; 11
 2cc:	08 95       	ret

000002ce <lcd_write>:
 * parameter:
 *	lcd_reg: register to communicate with (Instruction or Data register)
 *	data: 8-bit instruction or data (character)
 */
void lcd_write(enum lcd_register lcd_reg, uint8_t data)
{
 2ce:	cf 93       	push	r28
 2d0:	c6 2f       	mov	r28, r22
	// select register
	if (lcd_reg == INSTRUCTION) {
 2d2:	81 11       	cpse	r24, r1
 2d4:	04 c0       	rjmp	.+8      	; 0x2de <lcd_write+0x10>
		CLR_BIT(PORTD, 6);	// Instruction Register
 2d6:	8b b1       	in	r24, 0x0b	; 11
 2d8:	8f 7b       	andi	r24, 0xBF	; 191
 2da:	8b b9       	out	0x0b, r24	; 11
 2dc:	03 c0       	rjmp	.+6      	; 0x2e4 <lcd_write+0x16>
	} else {
		SET_BIT(PORTD, 6);	// Data Register
 2de:	8b b1       	in	r24, 0x0b	; 11
 2e0:	80 64       	ori	r24, 0x40	; 64
 2e2:	8b b9       	out	0x0b, r24	; 11
	}
	// write data
	write_4bit_msb(data);
 2e4:	8c 2f       	mov	r24, r28
 2e6:	0e 94 59 01 	call	0x2b2	; 0x2b2 <write_4bit_msb>
	write_4bit_msb(data << 4);
 2ea:	8c 2f       	mov	r24, r28
 2ec:	82 95       	swap	r24
 2ee:	80 7f       	andi	r24, 0xF0	; 240
 2f0:	0e 94 59 01 	call	0x2b2	; 0x2b2 <write_4bit_msb>
	delay_micros(45);
 2f4:	8d e2       	ldi	r24, 0x2D	; 45
 2f6:	0e 94 82 00 	call	0x104	; 0x104 <delay_micros>
}
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <lcd_clear>:
/*
 * Clears the LCD and moves the cursor to position row 0, column 0.
 */
void lcd_clear(void)
{
	lcd_write(INSTRUCTION, 0x01);
 2fe:	61 e0       	ldi	r22, 0x01	; 1
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	0e 94 67 01 	call	0x2ce	; 0x2ce <lcd_write>
	delay_ms(2);
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	0e 94 92 00 	call	0x124	; 0x124 <delay_ms>
 30c:	08 95       	ret

0000030e <lcd_set_cursor_mode>:
 *	mode: cursor mode
 */
void lcd_set_cursor_mode(enum lcd_cursor mode)
{
	uint8_t cursor_mode;
	cursor_mode = 0x0C | mode;
 30e:	68 2f       	mov	r22, r24
 310:	6c 60       	ori	r22, 0x0C	; 12
	lcd_write(INSTRUCTION, cursor_mode);
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	0e 94 67 01 	call	0x2ce	; 0x2ce <lcd_write>
 318:	08 95       	ret

0000031a <lcd_init>:
 *	- configuration of LCD communication
 */
void lcd_init(void)
{
	// PF4-PF7 (A3-A0) as outputs (LCD D4-D7)
	DDRF = 0xF0;
 31a:	80 ef       	ldi	r24, 0xF0	; 240
 31c:	80 bb       	out	0x10, r24	; 16
	// PD6 & PD7 (D12 & D6) as outputs (LCD RS & LCD E)
	DDRD = 0xC0;
 31e:	80 ec       	ldi	r24, 0xC0	; 192
 320:	8a b9       	out	0x0a, r24	; 10
	
	// wait more than 15 ms after power-up!
	delay_ms(20);
 322:	84 e1       	ldi	r24, 0x14	; 20
 324:	0e 94 92 00 	call	0x124	; 0x124 <delay_ms>
	// select Instruction Register
	CLR_BIT(PORTD, 6);
 328:	8b b1       	in	r24, 0x0b	; 11
 32a:	8f 7b       	andi	r24, 0xBF	; 191
 32c:	8b b9       	out	0x0b, r24	; 11

	// Function Set: 8 bit data interface
	write_4bit_msb(0x30);
 32e:	80 e3       	ldi	r24, 0x30	; 48
 330:	0e 94 59 01 	call	0x2b2	; 0x2b2 <write_4bit_msb>
	delay_ms(10);
 334:	8a e0       	ldi	r24, 0x0A	; 10
 336:	0e 94 92 00 	call	0x124	; 0x124 <delay_ms>
	write_4bit_msb(0x30);
 33a:	80 e3       	ldi	r24, 0x30	; 48
 33c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <write_4bit_msb>
	delay_ms(10);
 340:	8a e0       	ldi	r24, 0x0A	; 10
 342:	0e 94 92 00 	call	0x124	; 0x124 <delay_ms>
	write_4bit_msb(0x30);
 346:	80 e3       	ldi	r24, 0x30	; 48
 348:	0e 94 59 01 	call	0x2b2	; 0x2b2 <write_4bit_msb>
	delay_ms(10);
 34c:	8a e0       	ldi	r24, 0x0A	; 10
 34e:	0e 94 92 00 	call	0x124	; 0x124 <delay_ms>

	// Function Set: switch to 4 bit data interface
	write_4bit_msb(0x20);
 352:	80 e2       	ldi	r24, 0x20	; 32
 354:	0e 94 59 01 	call	0x2b2	; 0x2b2 <write_4bit_msb>
	delay_micros(45);
 358:	8d e2       	ldi	r24, 0x2D	; 45
 35a:	0e 94 82 00 	call	0x104	; 0x104 <delay_micros>

	// Function Set: 4 bit data interface, 2 lines, font 5x10
	lcd_write(INSTRUCTION, 0x28);		
 35e:	68 e2       	ldi	r22, 0x28	; 40
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	0e 94 67 01 	call	0x2ce	; 0x2ce <lcd_write>

	// Display on, no cursor
	lcd_set_cursor_mode(CURSOR_BLINK);
 366:	8f e0       	ldi	r24, 0x0F	; 15
 368:	0e 94 87 01 	call	0x30e	; 0x30e <lcd_set_cursor_mode>

	// clear display
	lcd_clear();
 36c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_clear>

	// Entry Mode Set: incremental cursor movement, no display shift
	lcd_write(INSTRUCTION, 0x06);
 370:	66 e0       	ldi	r22, 0x06	; 6
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	0e 94 67 01 	call	0x2ce	; 0x2ce <lcd_write>
 378:	08 95       	ret

0000037a <lcd_set_cursor_pos>:
 *	col: 0 is the first column, 15 is the last visible column
 */
void lcd_set_cursor_pos(uint8_t row, uint8_t col)
{
	uint8_t cursor_pos;
	cursor_pos = 0x80 | (row << 6) | col;
 37a:	20 e4       	ldi	r18, 0x40	; 64
 37c:	82 9f       	mul	r24, r18
 37e:	c0 01       	movw	r24, r0
 380:	11 24       	eor	r1, r1
 382:	68 2b       	or	r22, r24
 384:	60 68       	ori	r22, 0x80	; 128
	lcd_write(INSTRUCTION, cursor_pos);
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	0e 94 67 01 	call	0x2ce	; 0x2ce <lcd_write>
 38c:	08 95       	ret

0000038e <lcd_write_str>:
 * parameter:
 *	p_str: pointer to the string's first character
 * ”Grader-tecknet” har teckenkoden 0xDF.
 */
void lcd_write_str(char *p_str)
{	
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	ec 01       	movw	r28, r24
	while (*p_str != '\0')
 394:	04 c0       	rjmp	.+8      	; 0x39e <lcd_write_str+0x10>
	{
		lcd_write(DATA, *p_str);
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	0e 94 67 01 	call	0x2ce	; 0x2ce <lcd_write>
		p_str++;
 39c:	21 96       	adiw	r28, 0x01	; 1
 *	p_str: pointer to the string's first character
 * ”Grader-tecknet” har teckenkoden 0xDF.
 */
void lcd_write_str(char *p_str)
{	
	while (*p_str != '\0')
 39e:	68 81       	ld	r22, Y
 3a0:	61 11       	cpse	r22, r1
 3a2:	f9 cf       	rjmp	.-14     	; 0x396 <lcd_write_str+0x8>
	{
		lcd_write(DATA, *p_str);
		p_str++;
	}	
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	08 95       	ret

000003aa <motor_init>:

#include <avr/io.h>

motor_init(void) 
{
	DDRC |= (1 << 6); // set PC6 as output
 3aa:	87 b1       	in	r24, 0x07	; 7
 3ac:	80 64       	ori	r24, 0x40	; 64
 3ae:	87 b9       	out	0x07, r24	; 7
	
	TCCR3A |= (1 << COM3A1); // Set OC3A (PC6) to be cleared on compare match //Channel A
 3b0:	e0 e9       	ldi	r30, 0x90	; 144
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	80 81       	ld	r24, Z
 3b6:	80 68       	ori	r24, 0x80	; 128
 3b8:	80 83       	st	Z, r24
	TCCR3A |= (1 << WGM30); // Waveform generation mode 5, Fast PWM (8-bit)
 3ba:	80 81       	ld	r24, Z
 3bc:	81 60       	ori	r24, 0x01	; 1
 3be:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM32); 
 3c0:	e1 e9       	ldi	r30, 0x91	; 145
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	80 81       	ld	r24, Z
 3c6:	88 60       	ori	r24, 0x08	; 8
 3c8:	80 83       	st	Z, r24
	TCCR3B |= (1 << CS31) | (1 << CS30); //Timer clock, 16/64 MHz = 1/4 MHz
 3ca:	80 81       	ld	r24, Z
 3cc:	83 60       	ori	r24, 0x03	; 3
 3ce:	80 83       	st	Z, r24
}
 3d0:	08 95       	ret

000003d2 <motor_speed_set>:

void motor_speed_set(uint8_t speed)
{
	OCR3AH = 0;
 3d2:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7f8099>
	OCR3AL = (speed * 255) / 100;
 3d6:	2f ef       	ldi	r18, 0xFF	; 255
 3d8:	82 9f       	mul	r24, r18
 3da:	c0 01       	movw	r24, r0
 3dc:	11 24       	eor	r1, r1
 3de:	64 e6       	ldi	r22, 0x64	; 100
 3e0:	70 e0       	ldi	r23, 0x00	; 0
 3e2:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__divmodhi4>
 3e6:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7f8098>
 3ea:	08 95       	ret

000003ec <numkey_init>:
 * This function configures the ports and pins to be used by the keyboard.
 */
void numkey_init(void)
{
	// PE6 (D7) as input (key pressed?)
	DDRE = 0x00;
 3ec:	1d b8       	out	0x0d, r1	; 13
	// PB4-PB7 (D8-D11) as outputs (MUX and decoder)
	DDRB = 0xF0;	
 3ee:	80 ef       	ldi	r24, 0xF0	; 240
 3f0:	84 b9       	out	0x04, r24	; 4
 3f2:	08 95       	ret

000003f4 <numkey_read>:
 * return:
 *	If a key is pressed, then a character that represents the key is returned.
 *	Otherwise, a NO_KEY character is returned!
 */
char numkey_read(void)
{
 3f4:	0f 93       	push	r16
 3f6:	1f 93       	push	r17
 3f8:	cf 93       	push	r28
	uint8_t	i;
	for (i = 0; i < 12; i++) 
 3fa:	c0 e0       	ldi	r28, 0x00	; 0
 3fc:	19 c0       	rjmp	.+50     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
	{		
		SET_BIT_LEVELS(PORTB, 0x0F, (i << 4));	
 3fe:	25 b1       	in	r18, 0x05	; 5
 400:	0c 2f       	mov	r16, r28
 402:	10 e0       	ldi	r17, 0x00	; 0
 404:	c8 01       	movw	r24, r16
 406:	82 95       	swap	r24
 408:	92 95       	swap	r25
 40a:	90 7f       	andi	r25, 0xF0	; 240
 40c:	98 27       	eor	r25, r24
 40e:	80 7f       	andi	r24, 0xF0	; 240
 410:	98 27       	eor	r25, r24
 412:	92 2f       	mov	r25, r18
 414:	9f 70       	andi	r25, 0x0F	; 15
 416:	89 2b       	or	r24, r25
 418:	85 b9       	out	0x05, r24	; 5
		delay_ms(1);
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	0e 94 92 00 	call	0x124	; 0x124 <delay_ms>
		// if key was pressed...
		if (PINE & 0b01000000) 
 420:	66 9b       	sbis	0x0c, 6	; 12
 422:	05 c0       	rjmp	.+10     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
		{	// To do: write the logic expression to be true if PINE bit 6 is 1.
			return key_map[i];
 424:	f8 01       	movw	r30, r16
 426:	e9 5d       	subi	r30, 0xD9	; 217
 428:	fe 4f       	sbci	r31, 0xFE	; 254
 42a:	80 81       	ld	r24, Z
 42c:	04 c0       	rjmp	.+8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 *	Otherwise, a NO_KEY character is returned!
 */
char numkey_read(void)
{
	uint8_t	i;
	for (i = 0; i < 12; i++) 
 42e:	cf 5f       	subi	r28, 0xFF	; 255
 430:	cc 30       	cpi	r28, 0x0C	; 12
 432:	28 f3       	brcs	.-54     	; 0x3fe <numkey_read+0xa>
		{	// To do: write the logic expression to be true if PINE bit 6 is 1.
			return key_map[i];
		}
	}
	// no key was pressed!
	return NO_KEY;
 434:	80 e0       	ldi	r24, 0x00	; 0
	
 436:	cf 91       	pop	r28
 438:	1f 91       	pop	r17
 43a:	0f 91       	pop	r16
 43c:	08 95       	ret

0000043e <__vector_29>:
/*
 * Interrupt Service Routine for the ADC.
 * The ISR will execute when a A/D conversion is complete.
 */
ISR(ADC_vect)
{
 43e:	1f 92       	push	r1
 440:	0f 92       	push	r0
 442:	0f b6       	in	r0, 0x3f	; 63
 444:	0f 92       	push	r0
 446:	11 24       	eor	r1, r1
 448:	8f 93       	push	r24
	adc = ADCH;
 44a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 44e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 452:	8f 91       	pop	r24
 454:	0f 90       	pop	r0
 456:	0f be       	out	0x3f, r0	; 63
 458:	0f 90       	pop	r0
 45a:	1f 90       	pop	r1
 45c:	18 95       	reti

0000045e <reg_init>:
	
	//ADC conversion  ADC = Vin * 1023 / Vref
	
	//KOLLA DATABLAD FÖR PROCESSORN VI ANVÄNDER
	// UPPGIFT: konfigurera ADC-enheten genom ställa in ADMUX och ADCSRA enligt kommentarerna nedanför!
	ADMUX |= (1 << REFS0);		// set reference voltage (internal 5V)
 45e:	ec e7       	ldi	r30, 0x7C	; 124
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	80 81       	ld	r24, Z
 464:	80 64       	ori	r24, 0x40	; 64
 466:	80 83       	st	Z, r24
	//ADMUX |= 0b00001001;
	ADMUX |= (1 << MUX0); // select diff.amp 10x on ADC0 & ADC1
 468:	80 81       	ld	r24, Z
 46a:	81 60       	ori	r24, 0x01	; 1
 46c:	80 83       	st	Z, r24
								// right adjustment of ADC value
	ADMUX |= (1 << ADLAR);
 46e:	80 81       	ld	r24, Z
 470:	80 62       	ori	r24, 0x20	; 32
 472:	80 83       	st	Z, r24
	
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);	// prescaler 128
 474:	ea e7       	ldi	r30, 0x7A	; 122
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	80 81       	ld	r24, Z
 47a:	87 60       	ori	r24, 0x07	; 7
 47c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADATE);		// enable Auto Trigger
 47e:	80 81       	ld	r24, Z
 480:	80 62       	ori	r24, 0x20	; 32
 482:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);		// enable Interrupt
 484:	80 81       	ld	r24, Z
 486:	88 60       	ori	r24, 0x08	; 8
 488:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);		// enable ADC
 48a:	80 81       	ld	r24, Z
 48c:	80 68       	ori	r24, 0x80	; 128
 48e:	80 83       	st	Z, r24

	// disable digital input on ADC0 and ADC1
	DIDR0 = 3;
 490:	83 e0       	ldi	r24, 0x03	; 3
 492:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
		
	// disable USB controller (to make interrupts possible)
	USBCON = 0;	
 496:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
	// enable global interrupts
	sei();
 49a:	78 94       	sei

	// start initial conversion
	ADCSRA |= (1 << ADSC);	// UPPGIFT: gör så att den initiala A/D-omvandlingen sker
 49c:	80 81       	ld	r24, Z
 49e:	80 64       	ori	r24, 0x40	; 64
 4a0:	80 83       	st	Z, r24
 4a2:	08 95       	ret

000004a4 <reg_power_read>:
}

uint8_t reg_power_read(void)
{
	uint16_t temp = adc * 100;
 4a4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4a8:	84 e6       	ldi	r24, 0x64	; 100
 4aa:	28 9f       	mul	r18, r24
 4ac:	90 01       	movw	r18, r0
 4ae:	11 24       	eor	r1, r1
	uint16_t adc_correction = temp / 255;
 4b0:	a1 e8       	ldi	r26, 0x81	; 129
 4b2:	b0 e8       	ldi	r27, 0x80	; 128
 4b4:	0e 94 76 02 	call	0x4ec	; 0x4ec <__umulhisi3>
 4b8:	88 0f       	add	r24, r24
 4ba:	89 2f       	mov	r24, r25
 4bc:	88 1f       	adc	r24, r24
 4be:	99 0b       	sbc	r25, r25
 4c0:	91 95       	neg	r25
	
	return (uint8_t)adc_correction;
 4c2:	08 95       	ret

000004c4 <__divmodhi4>:
 4c4:	97 fb       	bst	r25, 7
 4c6:	07 2e       	mov	r0, r23
 4c8:	16 f4       	brtc	.+4      	; 0x4ce <__divmodhi4+0xa>
 4ca:	00 94       	com	r0
 4cc:	07 d0       	rcall	.+14     	; 0x4dc <__divmodhi4_neg1>
 4ce:	77 fd       	sbrc	r23, 7
 4d0:	09 d0       	rcall	.+18     	; 0x4e4 <__divmodhi4_neg2>
 4d2:	0e 94 85 02 	call	0x50a	; 0x50a <__udivmodhi4>
 4d6:	07 fc       	sbrc	r0, 7
 4d8:	05 d0       	rcall	.+10     	; 0x4e4 <__divmodhi4_neg2>
 4da:	3e f4       	brtc	.+14     	; 0x4ea <__divmodhi4_exit>

000004dc <__divmodhi4_neg1>:
 4dc:	90 95       	com	r25
 4de:	81 95       	neg	r24
 4e0:	9f 4f       	sbci	r25, 0xFF	; 255
 4e2:	08 95       	ret

000004e4 <__divmodhi4_neg2>:
 4e4:	70 95       	com	r23
 4e6:	61 95       	neg	r22
 4e8:	7f 4f       	sbci	r23, 0xFF	; 255

000004ea <__divmodhi4_exit>:
 4ea:	08 95       	ret

000004ec <__umulhisi3>:
 4ec:	a2 9f       	mul	r26, r18
 4ee:	b0 01       	movw	r22, r0
 4f0:	b3 9f       	mul	r27, r19
 4f2:	c0 01       	movw	r24, r0
 4f4:	a3 9f       	mul	r26, r19
 4f6:	70 0d       	add	r23, r0
 4f8:	81 1d       	adc	r24, r1
 4fa:	11 24       	eor	r1, r1
 4fc:	91 1d       	adc	r25, r1
 4fe:	b2 9f       	mul	r27, r18
 500:	70 0d       	add	r23, r0
 502:	81 1d       	adc	r24, r1
 504:	11 24       	eor	r1, r1
 506:	91 1d       	adc	r25, r1
 508:	08 95       	ret

0000050a <__udivmodhi4>:
 50a:	aa 1b       	sub	r26, r26
 50c:	bb 1b       	sub	r27, r27
 50e:	51 e1       	ldi	r21, 0x11	; 17
 510:	07 c0       	rjmp	.+14     	; 0x520 <__udivmodhi4_ep>

00000512 <__udivmodhi4_loop>:
 512:	aa 1f       	adc	r26, r26
 514:	bb 1f       	adc	r27, r27
 516:	a6 17       	cp	r26, r22
 518:	b7 07       	cpc	r27, r23
 51a:	10 f0       	brcs	.+4      	; 0x520 <__udivmodhi4_ep>
 51c:	a6 1b       	sub	r26, r22
 51e:	b7 0b       	sbc	r27, r23

00000520 <__udivmodhi4_ep>:
 520:	88 1f       	adc	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	5a 95       	dec	r21
 526:	a9 f7       	brne	.-22     	; 0x512 <__udivmodhi4_loop>
 528:	80 95       	com	r24
 52a:	90 95       	com	r25
 52c:	bc 01       	movw	r22, r24
 52e:	cd 01       	movw	r24, r26
 530:	08 95       	ret

00000532 <sprintf>:
 532:	ae e0       	ldi	r26, 0x0E	; 14
 534:	b0 e0       	ldi	r27, 0x00	; 0
 536:	ef e9       	ldi	r30, 0x9F	; 159
 538:	f2 e0       	ldi	r31, 0x02	; 2
 53a:	0c 94 5a 05 	jmp	0xab4	; 0xab4 <__prologue_saves__+0x1c>
 53e:	0d 89       	ldd	r16, Y+21	; 0x15
 540:	1e 89       	ldd	r17, Y+22	; 0x16
 542:	86 e0       	ldi	r24, 0x06	; 6
 544:	8c 83       	std	Y+4, r24	; 0x04
 546:	1a 83       	std	Y+2, r17	; 0x02
 548:	09 83       	std	Y+1, r16	; 0x01
 54a:	8f ef       	ldi	r24, 0xFF	; 255
 54c:	9f e7       	ldi	r25, 0x7F	; 127
 54e:	9e 83       	std	Y+6, r25	; 0x06
 550:	8d 83       	std	Y+5, r24	; 0x05
 552:	ae 01       	movw	r20, r28
 554:	47 5e       	subi	r20, 0xE7	; 231
 556:	5f 4f       	sbci	r21, 0xFF	; 255
 558:	6f 89       	ldd	r22, Y+23	; 0x17
 55a:	78 8d       	ldd	r23, Y+24	; 0x18
 55c:	ce 01       	movw	r24, r28
 55e:	01 96       	adiw	r24, 0x01	; 1
 560:	0e 94 bb 02 	call	0x576	; 0x576 <vfprintf>
 564:	ef 81       	ldd	r30, Y+7	; 0x07
 566:	f8 85       	ldd	r31, Y+8	; 0x08
 568:	e0 0f       	add	r30, r16
 56a:	f1 1f       	adc	r31, r17
 56c:	10 82       	st	Z, r1
 56e:	2e 96       	adiw	r28, 0x0e	; 14
 570:	e4 e0       	ldi	r30, 0x04	; 4
 572:	0c 94 76 05 	jmp	0xaec	; 0xaec <__epilogue_restores__+0x1c>

00000576 <vfprintf>:
 576:	ab e0       	ldi	r26, 0x0B	; 11
 578:	b0 e0       	ldi	r27, 0x00	; 0
 57a:	e1 ec       	ldi	r30, 0xC1	; 193
 57c:	f2 e0       	ldi	r31, 0x02	; 2
 57e:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <__prologue_saves__>
 582:	6c 01       	movw	r12, r24
 584:	7b 01       	movw	r14, r22
 586:	8a 01       	movw	r16, r20
 588:	fc 01       	movw	r30, r24
 58a:	17 82       	std	Z+7, r1	; 0x07
 58c:	16 82       	std	Z+6, r1	; 0x06
 58e:	83 81       	ldd	r24, Z+3	; 0x03
 590:	81 ff       	sbrs	r24, 1
 592:	cc c1       	rjmp	.+920    	; 0x92c <vfprintf+0x3b6>
 594:	ce 01       	movw	r24, r28
 596:	01 96       	adiw	r24, 0x01	; 1
 598:	3c 01       	movw	r6, r24
 59a:	f6 01       	movw	r30, r12
 59c:	93 81       	ldd	r25, Z+3	; 0x03
 59e:	f7 01       	movw	r30, r14
 5a0:	93 fd       	sbrc	r25, 3
 5a2:	85 91       	lpm	r24, Z+
 5a4:	93 ff       	sbrs	r25, 3
 5a6:	81 91       	ld	r24, Z+
 5a8:	7f 01       	movw	r14, r30
 5aa:	88 23       	and	r24, r24
 5ac:	09 f4       	brne	.+2      	; 0x5b0 <vfprintf+0x3a>
 5ae:	ba c1       	rjmp	.+884    	; 0x924 <vfprintf+0x3ae>
 5b0:	85 32       	cpi	r24, 0x25	; 37
 5b2:	39 f4       	brne	.+14     	; 0x5c2 <vfprintf+0x4c>
 5b4:	93 fd       	sbrc	r25, 3
 5b6:	85 91       	lpm	r24, Z+
 5b8:	93 ff       	sbrs	r25, 3
 5ba:	81 91       	ld	r24, Z+
 5bc:	7f 01       	movw	r14, r30
 5be:	85 32       	cpi	r24, 0x25	; 37
 5c0:	29 f4       	brne	.+10     	; 0x5cc <vfprintf+0x56>
 5c2:	b6 01       	movw	r22, r12
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	0e 94 b2 04 	call	0x964	; 0x964 <fputc>
 5ca:	e7 cf       	rjmp	.-50     	; 0x59a <vfprintf+0x24>
 5cc:	91 2c       	mov	r9, r1
 5ce:	21 2c       	mov	r2, r1
 5d0:	31 2c       	mov	r3, r1
 5d2:	ff e1       	ldi	r31, 0x1F	; 31
 5d4:	f3 15       	cp	r31, r3
 5d6:	d8 f0       	brcs	.+54     	; 0x60e <vfprintf+0x98>
 5d8:	8b 32       	cpi	r24, 0x2B	; 43
 5da:	79 f0       	breq	.+30     	; 0x5fa <vfprintf+0x84>
 5dc:	38 f4       	brcc	.+14     	; 0x5ec <vfprintf+0x76>
 5de:	80 32       	cpi	r24, 0x20	; 32
 5e0:	79 f0       	breq	.+30     	; 0x600 <vfprintf+0x8a>
 5e2:	83 32       	cpi	r24, 0x23	; 35
 5e4:	a1 f4       	brne	.+40     	; 0x60e <vfprintf+0x98>
 5e6:	23 2d       	mov	r18, r3
 5e8:	20 61       	ori	r18, 0x10	; 16
 5ea:	1d c0       	rjmp	.+58     	; 0x626 <vfprintf+0xb0>
 5ec:	8d 32       	cpi	r24, 0x2D	; 45
 5ee:	61 f0       	breq	.+24     	; 0x608 <vfprintf+0x92>
 5f0:	80 33       	cpi	r24, 0x30	; 48
 5f2:	69 f4       	brne	.+26     	; 0x60e <vfprintf+0x98>
 5f4:	23 2d       	mov	r18, r3
 5f6:	21 60       	ori	r18, 0x01	; 1
 5f8:	16 c0       	rjmp	.+44     	; 0x626 <vfprintf+0xb0>
 5fa:	83 2d       	mov	r24, r3
 5fc:	82 60       	ori	r24, 0x02	; 2
 5fe:	38 2e       	mov	r3, r24
 600:	e3 2d       	mov	r30, r3
 602:	e4 60       	ori	r30, 0x04	; 4
 604:	3e 2e       	mov	r3, r30
 606:	2a c0       	rjmp	.+84     	; 0x65c <vfprintf+0xe6>
 608:	f3 2d       	mov	r31, r3
 60a:	f8 60       	ori	r31, 0x08	; 8
 60c:	1d c0       	rjmp	.+58     	; 0x648 <vfprintf+0xd2>
 60e:	37 fc       	sbrc	r3, 7
 610:	2d c0       	rjmp	.+90     	; 0x66c <vfprintf+0xf6>
 612:	20 ed       	ldi	r18, 0xD0	; 208
 614:	28 0f       	add	r18, r24
 616:	2a 30       	cpi	r18, 0x0A	; 10
 618:	40 f0       	brcs	.+16     	; 0x62a <vfprintf+0xb4>
 61a:	8e 32       	cpi	r24, 0x2E	; 46
 61c:	b9 f4       	brne	.+46     	; 0x64c <vfprintf+0xd6>
 61e:	36 fc       	sbrc	r3, 6
 620:	81 c1       	rjmp	.+770    	; 0x924 <vfprintf+0x3ae>
 622:	23 2d       	mov	r18, r3
 624:	20 64       	ori	r18, 0x40	; 64
 626:	32 2e       	mov	r3, r18
 628:	19 c0       	rjmp	.+50     	; 0x65c <vfprintf+0xe6>
 62a:	36 fe       	sbrs	r3, 6
 62c:	06 c0       	rjmp	.+12     	; 0x63a <vfprintf+0xc4>
 62e:	8a e0       	ldi	r24, 0x0A	; 10
 630:	98 9e       	mul	r9, r24
 632:	20 0d       	add	r18, r0
 634:	11 24       	eor	r1, r1
 636:	92 2e       	mov	r9, r18
 638:	11 c0       	rjmp	.+34     	; 0x65c <vfprintf+0xe6>
 63a:	ea e0       	ldi	r30, 0x0A	; 10
 63c:	2e 9e       	mul	r2, r30
 63e:	20 0d       	add	r18, r0
 640:	11 24       	eor	r1, r1
 642:	22 2e       	mov	r2, r18
 644:	f3 2d       	mov	r31, r3
 646:	f0 62       	ori	r31, 0x20	; 32
 648:	3f 2e       	mov	r3, r31
 64a:	08 c0       	rjmp	.+16     	; 0x65c <vfprintf+0xe6>
 64c:	8c 36       	cpi	r24, 0x6C	; 108
 64e:	21 f4       	brne	.+8      	; 0x658 <vfprintf+0xe2>
 650:	83 2d       	mov	r24, r3
 652:	80 68       	ori	r24, 0x80	; 128
 654:	38 2e       	mov	r3, r24
 656:	02 c0       	rjmp	.+4      	; 0x65c <vfprintf+0xe6>
 658:	88 36       	cpi	r24, 0x68	; 104
 65a:	41 f4       	brne	.+16     	; 0x66c <vfprintf+0xf6>
 65c:	f7 01       	movw	r30, r14
 65e:	93 fd       	sbrc	r25, 3
 660:	85 91       	lpm	r24, Z+
 662:	93 ff       	sbrs	r25, 3
 664:	81 91       	ld	r24, Z+
 666:	7f 01       	movw	r14, r30
 668:	81 11       	cpse	r24, r1
 66a:	b3 cf       	rjmp	.-154    	; 0x5d2 <vfprintf+0x5c>
 66c:	98 2f       	mov	r25, r24
 66e:	9f 7d       	andi	r25, 0xDF	; 223
 670:	95 54       	subi	r25, 0x45	; 69
 672:	93 30       	cpi	r25, 0x03	; 3
 674:	28 f4       	brcc	.+10     	; 0x680 <vfprintf+0x10a>
 676:	0c 5f       	subi	r16, 0xFC	; 252
 678:	1f 4f       	sbci	r17, 0xFF	; 255
 67a:	9f e3       	ldi	r25, 0x3F	; 63
 67c:	99 83       	std	Y+1, r25	; 0x01
 67e:	0d c0       	rjmp	.+26     	; 0x69a <vfprintf+0x124>
 680:	83 36       	cpi	r24, 0x63	; 99
 682:	31 f0       	breq	.+12     	; 0x690 <vfprintf+0x11a>
 684:	83 37       	cpi	r24, 0x73	; 115
 686:	71 f0       	breq	.+28     	; 0x6a4 <vfprintf+0x12e>
 688:	83 35       	cpi	r24, 0x53	; 83
 68a:	09 f0       	breq	.+2      	; 0x68e <vfprintf+0x118>
 68c:	59 c0       	rjmp	.+178    	; 0x740 <vfprintf+0x1ca>
 68e:	21 c0       	rjmp	.+66     	; 0x6d2 <vfprintf+0x15c>
 690:	f8 01       	movw	r30, r16
 692:	80 81       	ld	r24, Z
 694:	89 83       	std	Y+1, r24	; 0x01
 696:	0e 5f       	subi	r16, 0xFE	; 254
 698:	1f 4f       	sbci	r17, 0xFF	; 255
 69a:	88 24       	eor	r8, r8
 69c:	83 94       	inc	r8
 69e:	91 2c       	mov	r9, r1
 6a0:	53 01       	movw	r10, r6
 6a2:	13 c0       	rjmp	.+38     	; 0x6ca <vfprintf+0x154>
 6a4:	28 01       	movw	r4, r16
 6a6:	f2 e0       	ldi	r31, 0x02	; 2
 6a8:	4f 0e       	add	r4, r31
 6aa:	51 1c       	adc	r5, r1
 6ac:	f8 01       	movw	r30, r16
 6ae:	a0 80       	ld	r10, Z
 6b0:	b1 80       	ldd	r11, Z+1	; 0x01
 6b2:	36 fe       	sbrs	r3, 6
 6b4:	03 c0       	rjmp	.+6      	; 0x6bc <vfprintf+0x146>
 6b6:	69 2d       	mov	r22, r9
 6b8:	70 e0       	ldi	r23, 0x00	; 0
 6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <vfprintf+0x14a>
 6bc:	6f ef       	ldi	r22, 0xFF	; 255
 6be:	7f ef       	ldi	r23, 0xFF	; 255
 6c0:	c5 01       	movw	r24, r10
 6c2:	0e 94 a7 04 	call	0x94e	; 0x94e <strnlen>
 6c6:	4c 01       	movw	r8, r24
 6c8:	82 01       	movw	r16, r4
 6ca:	f3 2d       	mov	r31, r3
 6cc:	ff 77       	andi	r31, 0x7F	; 127
 6ce:	3f 2e       	mov	r3, r31
 6d0:	16 c0       	rjmp	.+44     	; 0x6fe <vfprintf+0x188>
 6d2:	28 01       	movw	r4, r16
 6d4:	22 e0       	ldi	r18, 0x02	; 2
 6d6:	42 0e       	add	r4, r18
 6d8:	51 1c       	adc	r5, r1
 6da:	f8 01       	movw	r30, r16
 6dc:	a0 80       	ld	r10, Z
 6de:	b1 80       	ldd	r11, Z+1	; 0x01
 6e0:	36 fe       	sbrs	r3, 6
 6e2:	03 c0       	rjmp	.+6      	; 0x6ea <vfprintf+0x174>
 6e4:	69 2d       	mov	r22, r9
 6e6:	70 e0       	ldi	r23, 0x00	; 0
 6e8:	02 c0       	rjmp	.+4      	; 0x6ee <vfprintf+0x178>
 6ea:	6f ef       	ldi	r22, 0xFF	; 255
 6ec:	7f ef       	ldi	r23, 0xFF	; 255
 6ee:	c5 01       	movw	r24, r10
 6f0:	0e 94 9c 04 	call	0x938	; 0x938 <strnlen_P>
 6f4:	4c 01       	movw	r8, r24
 6f6:	f3 2d       	mov	r31, r3
 6f8:	f0 68       	ori	r31, 0x80	; 128
 6fa:	3f 2e       	mov	r3, r31
 6fc:	82 01       	movw	r16, r4
 6fe:	33 fc       	sbrc	r3, 3
 700:	1b c0       	rjmp	.+54     	; 0x738 <vfprintf+0x1c2>
 702:	82 2d       	mov	r24, r2
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	88 16       	cp	r8, r24
 708:	99 06       	cpc	r9, r25
 70a:	b0 f4       	brcc	.+44     	; 0x738 <vfprintf+0x1c2>
 70c:	b6 01       	movw	r22, r12
 70e:	80 e2       	ldi	r24, 0x20	; 32
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	0e 94 b2 04 	call	0x964	; 0x964 <fputc>
 716:	2a 94       	dec	r2
 718:	f4 cf       	rjmp	.-24     	; 0x702 <vfprintf+0x18c>
 71a:	f5 01       	movw	r30, r10
 71c:	37 fc       	sbrc	r3, 7
 71e:	85 91       	lpm	r24, Z+
 720:	37 fe       	sbrs	r3, 7
 722:	81 91       	ld	r24, Z+
 724:	5f 01       	movw	r10, r30
 726:	b6 01       	movw	r22, r12
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	0e 94 b2 04 	call	0x964	; 0x964 <fputc>
 72e:	21 10       	cpse	r2, r1
 730:	2a 94       	dec	r2
 732:	21 e0       	ldi	r18, 0x01	; 1
 734:	82 1a       	sub	r8, r18
 736:	91 08       	sbc	r9, r1
 738:	81 14       	cp	r8, r1
 73a:	91 04       	cpc	r9, r1
 73c:	71 f7       	brne	.-36     	; 0x71a <vfprintf+0x1a4>
 73e:	e8 c0       	rjmp	.+464    	; 0x910 <vfprintf+0x39a>
 740:	84 36       	cpi	r24, 0x64	; 100
 742:	11 f0       	breq	.+4      	; 0x748 <vfprintf+0x1d2>
 744:	89 36       	cpi	r24, 0x69	; 105
 746:	41 f5       	brne	.+80     	; 0x798 <vfprintf+0x222>
 748:	f8 01       	movw	r30, r16
 74a:	37 fe       	sbrs	r3, 7
 74c:	07 c0       	rjmp	.+14     	; 0x75c <vfprintf+0x1e6>
 74e:	60 81       	ld	r22, Z
 750:	71 81       	ldd	r23, Z+1	; 0x01
 752:	82 81       	ldd	r24, Z+2	; 0x02
 754:	93 81       	ldd	r25, Z+3	; 0x03
 756:	0c 5f       	subi	r16, 0xFC	; 252
 758:	1f 4f       	sbci	r17, 0xFF	; 255
 75a:	08 c0       	rjmp	.+16     	; 0x76c <vfprintf+0x1f6>
 75c:	60 81       	ld	r22, Z
 75e:	71 81       	ldd	r23, Z+1	; 0x01
 760:	07 2e       	mov	r0, r23
 762:	00 0c       	add	r0, r0
 764:	88 0b       	sbc	r24, r24
 766:	99 0b       	sbc	r25, r25
 768:	0e 5f       	subi	r16, 0xFE	; 254
 76a:	1f 4f       	sbci	r17, 0xFF	; 255
 76c:	f3 2d       	mov	r31, r3
 76e:	ff 76       	andi	r31, 0x6F	; 111
 770:	3f 2e       	mov	r3, r31
 772:	97 ff       	sbrs	r25, 7
 774:	09 c0       	rjmp	.+18     	; 0x788 <vfprintf+0x212>
 776:	90 95       	com	r25
 778:	80 95       	com	r24
 77a:	70 95       	com	r23
 77c:	61 95       	neg	r22
 77e:	7f 4f       	sbci	r23, 0xFF	; 255
 780:	8f 4f       	sbci	r24, 0xFF	; 255
 782:	9f 4f       	sbci	r25, 0xFF	; 255
 784:	f0 68       	ori	r31, 0x80	; 128
 786:	3f 2e       	mov	r3, r31
 788:	2a e0       	ldi	r18, 0x0A	; 10
 78a:	30 e0       	ldi	r19, 0x00	; 0
 78c:	a3 01       	movw	r20, r6
 78e:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__ultoa_invert>
 792:	88 2e       	mov	r8, r24
 794:	86 18       	sub	r8, r6
 796:	45 c0       	rjmp	.+138    	; 0x822 <vfprintf+0x2ac>
 798:	85 37       	cpi	r24, 0x75	; 117
 79a:	31 f4       	brne	.+12     	; 0x7a8 <vfprintf+0x232>
 79c:	23 2d       	mov	r18, r3
 79e:	2f 7e       	andi	r18, 0xEF	; 239
 7a0:	b2 2e       	mov	r11, r18
 7a2:	2a e0       	ldi	r18, 0x0A	; 10
 7a4:	30 e0       	ldi	r19, 0x00	; 0
 7a6:	25 c0       	rjmp	.+74     	; 0x7f2 <vfprintf+0x27c>
 7a8:	93 2d       	mov	r25, r3
 7aa:	99 7f       	andi	r25, 0xF9	; 249
 7ac:	b9 2e       	mov	r11, r25
 7ae:	8f 36       	cpi	r24, 0x6F	; 111
 7b0:	c1 f0       	breq	.+48     	; 0x7e2 <vfprintf+0x26c>
 7b2:	18 f4       	brcc	.+6      	; 0x7ba <vfprintf+0x244>
 7b4:	88 35       	cpi	r24, 0x58	; 88
 7b6:	79 f0       	breq	.+30     	; 0x7d6 <vfprintf+0x260>
 7b8:	b5 c0       	rjmp	.+362    	; 0x924 <vfprintf+0x3ae>
 7ba:	80 37       	cpi	r24, 0x70	; 112
 7bc:	19 f0       	breq	.+6      	; 0x7c4 <vfprintf+0x24e>
 7be:	88 37       	cpi	r24, 0x78	; 120
 7c0:	21 f0       	breq	.+8      	; 0x7ca <vfprintf+0x254>
 7c2:	b0 c0       	rjmp	.+352    	; 0x924 <vfprintf+0x3ae>
 7c4:	e9 2f       	mov	r30, r25
 7c6:	e0 61       	ori	r30, 0x10	; 16
 7c8:	be 2e       	mov	r11, r30
 7ca:	b4 fe       	sbrs	r11, 4
 7cc:	0d c0       	rjmp	.+26     	; 0x7e8 <vfprintf+0x272>
 7ce:	fb 2d       	mov	r31, r11
 7d0:	f4 60       	ori	r31, 0x04	; 4
 7d2:	bf 2e       	mov	r11, r31
 7d4:	09 c0       	rjmp	.+18     	; 0x7e8 <vfprintf+0x272>
 7d6:	34 fe       	sbrs	r3, 4
 7d8:	0a c0       	rjmp	.+20     	; 0x7ee <vfprintf+0x278>
 7da:	29 2f       	mov	r18, r25
 7dc:	26 60       	ori	r18, 0x06	; 6
 7de:	b2 2e       	mov	r11, r18
 7e0:	06 c0       	rjmp	.+12     	; 0x7ee <vfprintf+0x278>
 7e2:	28 e0       	ldi	r18, 0x08	; 8
 7e4:	30 e0       	ldi	r19, 0x00	; 0
 7e6:	05 c0       	rjmp	.+10     	; 0x7f2 <vfprintf+0x27c>
 7e8:	20 e1       	ldi	r18, 0x10	; 16
 7ea:	30 e0       	ldi	r19, 0x00	; 0
 7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <vfprintf+0x27c>
 7ee:	20 e1       	ldi	r18, 0x10	; 16
 7f0:	32 e0       	ldi	r19, 0x02	; 2
 7f2:	f8 01       	movw	r30, r16
 7f4:	b7 fe       	sbrs	r11, 7
 7f6:	07 c0       	rjmp	.+14     	; 0x806 <vfprintf+0x290>
 7f8:	60 81       	ld	r22, Z
 7fa:	71 81       	ldd	r23, Z+1	; 0x01
 7fc:	82 81       	ldd	r24, Z+2	; 0x02
 7fe:	93 81       	ldd	r25, Z+3	; 0x03
 800:	0c 5f       	subi	r16, 0xFC	; 252
 802:	1f 4f       	sbci	r17, 0xFF	; 255
 804:	06 c0       	rjmp	.+12     	; 0x812 <vfprintf+0x29c>
 806:	60 81       	ld	r22, Z
 808:	71 81       	ldd	r23, Z+1	; 0x01
 80a:	80 e0       	ldi	r24, 0x00	; 0
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	0e 5f       	subi	r16, 0xFE	; 254
 810:	1f 4f       	sbci	r17, 0xFF	; 255
 812:	a3 01       	movw	r20, r6
 814:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__ultoa_invert>
 818:	88 2e       	mov	r8, r24
 81a:	86 18       	sub	r8, r6
 81c:	fb 2d       	mov	r31, r11
 81e:	ff 77       	andi	r31, 0x7F	; 127
 820:	3f 2e       	mov	r3, r31
 822:	36 fe       	sbrs	r3, 6
 824:	0d c0       	rjmp	.+26     	; 0x840 <vfprintf+0x2ca>
 826:	23 2d       	mov	r18, r3
 828:	2e 7f       	andi	r18, 0xFE	; 254
 82a:	a2 2e       	mov	r10, r18
 82c:	89 14       	cp	r8, r9
 82e:	58 f4       	brcc	.+22     	; 0x846 <vfprintf+0x2d0>
 830:	34 fe       	sbrs	r3, 4
 832:	0b c0       	rjmp	.+22     	; 0x84a <vfprintf+0x2d4>
 834:	32 fc       	sbrc	r3, 2
 836:	09 c0       	rjmp	.+18     	; 0x84a <vfprintf+0x2d4>
 838:	83 2d       	mov	r24, r3
 83a:	8e 7e       	andi	r24, 0xEE	; 238
 83c:	a8 2e       	mov	r10, r24
 83e:	05 c0       	rjmp	.+10     	; 0x84a <vfprintf+0x2d4>
 840:	b8 2c       	mov	r11, r8
 842:	a3 2c       	mov	r10, r3
 844:	03 c0       	rjmp	.+6      	; 0x84c <vfprintf+0x2d6>
 846:	b8 2c       	mov	r11, r8
 848:	01 c0       	rjmp	.+2      	; 0x84c <vfprintf+0x2d6>
 84a:	b9 2c       	mov	r11, r9
 84c:	a4 fe       	sbrs	r10, 4
 84e:	0f c0       	rjmp	.+30     	; 0x86e <vfprintf+0x2f8>
 850:	fe 01       	movw	r30, r28
 852:	e8 0d       	add	r30, r8
 854:	f1 1d       	adc	r31, r1
 856:	80 81       	ld	r24, Z
 858:	80 33       	cpi	r24, 0x30	; 48
 85a:	21 f4       	brne	.+8      	; 0x864 <vfprintf+0x2ee>
 85c:	9a 2d       	mov	r25, r10
 85e:	99 7e       	andi	r25, 0xE9	; 233
 860:	a9 2e       	mov	r10, r25
 862:	09 c0       	rjmp	.+18     	; 0x876 <vfprintf+0x300>
 864:	a2 fe       	sbrs	r10, 2
 866:	06 c0       	rjmp	.+12     	; 0x874 <vfprintf+0x2fe>
 868:	b3 94       	inc	r11
 86a:	b3 94       	inc	r11
 86c:	04 c0       	rjmp	.+8      	; 0x876 <vfprintf+0x300>
 86e:	8a 2d       	mov	r24, r10
 870:	86 78       	andi	r24, 0x86	; 134
 872:	09 f0       	breq	.+2      	; 0x876 <vfprintf+0x300>
 874:	b3 94       	inc	r11
 876:	a3 fc       	sbrc	r10, 3
 878:	11 c0       	rjmp	.+34     	; 0x89c <vfprintf+0x326>
 87a:	a0 fe       	sbrs	r10, 0
 87c:	06 c0       	rjmp	.+12     	; 0x88a <vfprintf+0x314>
 87e:	b2 14       	cp	r11, r2
 880:	88 f4       	brcc	.+34     	; 0x8a4 <vfprintf+0x32e>
 882:	28 0c       	add	r2, r8
 884:	92 2c       	mov	r9, r2
 886:	9b 18       	sub	r9, r11
 888:	0e c0       	rjmp	.+28     	; 0x8a6 <vfprintf+0x330>
 88a:	b2 14       	cp	r11, r2
 88c:	60 f4       	brcc	.+24     	; 0x8a6 <vfprintf+0x330>
 88e:	b6 01       	movw	r22, r12
 890:	80 e2       	ldi	r24, 0x20	; 32
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	0e 94 b2 04 	call	0x964	; 0x964 <fputc>
 898:	b3 94       	inc	r11
 89a:	f7 cf       	rjmp	.-18     	; 0x88a <vfprintf+0x314>
 89c:	b2 14       	cp	r11, r2
 89e:	18 f4       	brcc	.+6      	; 0x8a6 <vfprintf+0x330>
 8a0:	2b 18       	sub	r2, r11
 8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <vfprintf+0x332>
 8a4:	98 2c       	mov	r9, r8
 8a6:	21 2c       	mov	r2, r1
 8a8:	a4 fe       	sbrs	r10, 4
 8aa:	10 c0       	rjmp	.+32     	; 0x8cc <vfprintf+0x356>
 8ac:	b6 01       	movw	r22, r12
 8ae:	80 e3       	ldi	r24, 0x30	; 48
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	0e 94 b2 04 	call	0x964	; 0x964 <fputc>
 8b6:	a2 fe       	sbrs	r10, 2
 8b8:	17 c0       	rjmp	.+46     	; 0x8e8 <vfprintf+0x372>
 8ba:	a1 fc       	sbrc	r10, 1
 8bc:	03 c0       	rjmp	.+6      	; 0x8c4 <vfprintf+0x34e>
 8be:	88 e7       	ldi	r24, 0x78	; 120
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <vfprintf+0x352>
 8c4:	88 e5       	ldi	r24, 0x58	; 88
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	b6 01       	movw	r22, r12
 8ca:	0c c0       	rjmp	.+24     	; 0x8e4 <vfprintf+0x36e>
 8cc:	8a 2d       	mov	r24, r10
 8ce:	86 78       	andi	r24, 0x86	; 134
 8d0:	59 f0       	breq	.+22     	; 0x8e8 <vfprintf+0x372>
 8d2:	a1 fe       	sbrs	r10, 1
 8d4:	02 c0       	rjmp	.+4      	; 0x8da <vfprintf+0x364>
 8d6:	8b e2       	ldi	r24, 0x2B	; 43
 8d8:	01 c0       	rjmp	.+2      	; 0x8dc <vfprintf+0x366>
 8da:	80 e2       	ldi	r24, 0x20	; 32
 8dc:	a7 fc       	sbrc	r10, 7
 8de:	8d e2       	ldi	r24, 0x2D	; 45
 8e0:	b6 01       	movw	r22, r12
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	0e 94 b2 04 	call	0x964	; 0x964 <fputc>
 8e8:	89 14       	cp	r8, r9
 8ea:	38 f4       	brcc	.+14     	; 0x8fa <vfprintf+0x384>
 8ec:	b6 01       	movw	r22, r12
 8ee:	80 e3       	ldi	r24, 0x30	; 48
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	0e 94 b2 04 	call	0x964	; 0x964 <fputc>
 8f6:	9a 94       	dec	r9
 8f8:	f7 cf       	rjmp	.-18     	; 0x8e8 <vfprintf+0x372>
 8fa:	8a 94       	dec	r8
 8fc:	f3 01       	movw	r30, r6
 8fe:	e8 0d       	add	r30, r8
 900:	f1 1d       	adc	r31, r1
 902:	80 81       	ld	r24, Z
 904:	b6 01       	movw	r22, r12
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	0e 94 b2 04 	call	0x964	; 0x964 <fputc>
 90c:	81 10       	cpse	r8, r1
 90e:	f5 cf       	rjmp	.-22     	; 0x8fa <vfprintf+0x384>
 910:	22 20       	and	r2, r2
 912:	09 f4       	brne	.+2      	; 0x916 <vfprintf+0x3a0>
 914:	42 ce       	rjmp	.-892    	; 0x59a <vfprintf+0x24>
 916:	b6 01       	movw	r22, r12
 918:	80 e2       	ldi	r24, 0x20	; 32
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	0e 94 b2 04 	call	0x964	; 0x964 <fputc>
 920:	2a 94       	dec	r2
 922:	f6 cf       	rjmp	.-20     	; 0x910 <vfprintf+0x39a>
 924:	f6 01       	movw	r30, r12
 926:	86 81       	ldd	r24, Z+6	; 0x06
 928:	97 81       	ldd	r25, Z+7	; 0x07
 92a:	02 c0       	rjmp	.+4      	; 0x930 <vfprintf+0x3ba>
 92c:	8f ef       	ldi	r24, 0xFF	; 255
 92e:	9f ef       	ldi	r25, 0xFF	; 255
 930:	2b 96       	adiw	r28, 0x0b	; 11
 932:	e2 e1       	ldi	r30, 0x12	; 18
 934:	0c 94 68 05 	jmp	0xad0	; 0xad0 <__epilogue_restores__>

00000938 <strnlen_P>:
 938:	fc 01       	movw	r30, r24
 93a:	05 90       	lpm	r0, Z+
 93c:	61 50       	subi	r22, 0x01	; 1
 93e:	70 40       	sbci	r23, 0x00	; 0
 940:	01 10       	cpse	r0, r1
 942:	d8 f7       	brcc	.-10     	; 0x93a <strnlen_P+0x2>
 944:	80 95       	com	r24
 946:	90 95       	com	r25
 948:	8e 0f       	add	r24, r30
 94a:	9f 1f       	adc	r25, r31
 94c:	08 95       	ret

0000094e <strnlen>:
 94e:	fc 01       	movw	r30, r24
 950:	61 50       	subi	r22, 0x01	; 1
 952:	70 40       	sbci	r23, 0x00	; 0
 954:	01 90       	ld	r0, Z+
 956:	01 10       	cpse	r0, r1
 958:	d8 f7       	brcc	.-10     	; 0x950 <strnlen+0x2>
 95a:	80 95       	com	r24
 95c:	90 95       	com	r25
 95e:	8e 0f       	add	r24, r30
 960:	9f 1f       	adc	r25, r31
 962:	08 95       	ret

00000964 <fputc>:
 964:	0f 93       	push	r16
 966:	1f 93       	push	r17
 968:	cf 93       	push	r28
 96a:	df 93       	push	r29
 96c:	fb 01       	movw	r30, r22
 96e:	23 81       	ldd	r18, Z+3	; 0x03
 970:	21 fd       	sbrc	r18, 1
 972:	03 c0       	rjmp	.+6      	; 0x97a <fputc+0x16>
 974:	8f ef       	ldi	r24, 0xFF	; 255
 976:	9f ef       	ldi	r25, 0xFF	; 255
 978:	2c c0       	rjmp	.+88     	; 0x9d2 <fputc+0x6e>
 97a:	22 ff       	sbrs	r18, 2
 97c:	16 c0       	rjmp	.+44     	; 0x9aa <fputc+0x46>
 97e:	46 81       	ldd	r20, Z+6	; 0x06
 980:	57 81       	ldd	r21, Z+7	; 0x07
 982:	24 81       	ldd	r18, Z+4	; 0x04
 984:	35 81       	ldd	r19, Z+5	; 0x05
 986:	42 17       	cp	r20, r18
 988:	53 07       	cpc	r21, r19
 98a:	44 f4       	brge	.+16     	; 0x99c <fputc+0x38>
 98c:	a0 81       	ld	r26, Z
 98e:	b1 81       	ldd	r27, Z+1	; 0x01
 990:	9d 01       	movw	r18, r26
 992:	2f 5f       	subi	r18, 0xFF	; 255
 994:	3f 4f       	sbci	r19, 0xFF	; 255
 996:	31 83       	std	Z+1, r19	; 0x01
 998:	20 83       	st	Z, r18
 99a:	8c 93       	st	X, r24
 99c:	26 81       	ldd	r18, Z+6	; 0x06
 99e:	37 81       	ldd	r19, Z+7	; 0x07
 9a0:	2f 5f       	subi	r18, 0xFF	; 255
 9a2:	3f 4f       	sbci	r19, 0xFF	; 255
 9a4:	37 83       	std	Z+7, r19	; 0x07
 9a6:	26 83       	std	Z+6, r18	; 0x06
 9a8:	14 c0       	rjmp	.+40     	; 0x9d2 <fputc+0x6e>
 9aa:	8b 01       	movw	r16, r22
 9ac:	ec 01       	movw	r28, r24
 9ae:	fb 01       	movw	r30, r22
 9b0:	00 84       	ldd	r0, Z+8	; 0x08
 9b2:	f1 85       	ldd	r31, Z+9	; 0x09
 9b4:	e0 2d       	mov	r30, r0
 9b6:	09 95       	icall
 9b8:	89 2b       	or	r24, r25
 9ba:	e1 f6       	brne	.-72     	; 0x974 <fputc+0x10>
 9bc:	d8 01       	movw	r26, r16
 9be:	16 96       	adiw	r26, 0x06	; 6
 9c0:	8d 91       	ld	r24, X+
 9c2:	9c 91       	ld	r25, X
 9c4:	17 97       	sbiw	r26, 0x07	; 7
 9c6:	01 96       	adiw	r24, 0x01	; 1
 9c8:	17 96       	adiw	r26, 0x07	; 7
 9ca:	9c 93       	st	X, r25
 9cc:	8e 93       	st	-X, r24
 9ce:	16 97       	sbiw	r26, 0x06	; 6
 9d0:	ce 01       	movw	r24, r28
 9d2:	df 91       	pop	r29
 9d4:	cf 91       	pop	r28
 9d6:	1f 91       	pop	r17
 9d8:	0f 91       	pop	r16
 9da:	08 95       	ret

000009dc <__ultoa_invert>:
 9dc:	fa 01       	movw	r30, r20
 9de:	aa 27       	eor	r26, r26
 9e0:	28 30       	cpi	r18, 0x08	; 8
 9e2:	51 f1       	breq	.+84     	; 0xa38 <__DATA_REGION_LENGTH__+0x38>
 9e4:	20 31       	cpi	r18, 0x10	; 16
 9e6:	81 f1       	breq	.+96     	; 0xa48 <__DATA_REGION_LENGTH__+0x48>
 9e8:	e8 94       	clt
 9ea:	6f 93       	push	r22
 9ec:	6e 7f       	andi	r22, 0xFE	; 254
 9ee:	6e 5f       	subi	r22, 0xFE	; 254
 9f0:	7f 4f       	sbci	r23, 0xFF	; 255
 9f2:	8f 4f       	sbci	r24, 0xFF	; 255
 9f4:	9f 4f       	sbci	r25, 0xFF	; 255
 9f6:	af 4f       	sbci	r26, 0xFF	; 255
 9f8:	b1 e0       	ldi	r27, 0x01	; 1
 9fa:	3e d0       	rcall	.+124    	; 0xa78 <__DATA_REGION_LENGTH__+0x78>
 9fc:	b4 e0       	ldi	r27, 0x04	; 4
 9fe:	3c d0       	rcall	.+120    	; 0xa78 <__DATA_REGION_LENGTH__+0x78>
 a00:	67 0f       	add	r22, r23
 a02:	78 1f       	adc	r23, r24
 a04:	89 1f       	adc	r24, r25
 a06:	9a 1f       	adc	r25, r26
 a08:	a1 1d       	adc	r26, r1
 a0a:	68 0f       	add	r22, r24
 a0c:	79 1f       	adc	r23, r25
 a0e:	8a 1f       	adc	r24, r26
 a10:	91 1d       	adc	r25, r1
 a12:	a1 1d       	adc	r26, r1
 a14:	6a 0f       	add	r22, r26
 a16:	71 1d       	adc	r23, r1
 a18:	81 1d       	adc	r24, r1
 a1a:	91 1d       	adc	r25, r1
 a1c:	a1 1d       	adc	r26, r1
 a1e:	20 d0       	rcall	.+64     	; 0xa60 <__DATA_REGION_LENGTH__+0x60>
 a20:	09 f4       	brne	.+2      	; 0xa24 <__DATA_REGION_LENGTH__+0x24>
 a22:	68 94       	set
 a24:	3f 91       	pop	r19
 a26:	2a e0       	ldi	r18, 0x0A	; 10
 a28:	26 9f       	mul	r18, r22
 a2a:	11 24       	eor	r1, r1
 a2c:	30 19       	sub	r19, r0
 a2e:	30 5d       	subi	r19, 0xD0	; 208
 a30:	31 93       	st	Z+, r19
 a32:	de f6       	brtc	.-74     	; 0x9ea <__ultoa_invert+0xe>
 a34:	cf 01       	movw	r24, r30
 a36:	08 95       	ret
 a38:	46 2f       	mov	r20, r22
 a3a:	47 70       	andi	r20, 0x07	; 7
 a3c:	40 5d       	subi	r20, 0xD0	; 208
 a3e:	41 93       	st	Z+, r20
 a40:	b3 e0       	ldi	r27, 0x03	; 3
 a42:	0f d0       	rcall	.+30     	; 0xa62 <__DATA_REGION_LENGTH__+0x62>
 a44:	c9 f7       	brne	.-14     	; 0xa38 <__DATA_REGION_LENGTH__+0x38>
 a46:	f6 cf       	rjmp	.-20     	; 0xa34 <__DATA_REGION_LENGTH__+0x34>
 a48:	46 2f       	mov	r20, r22
 a4a:	4f 70       	andi	r20, 0x0F	; 15
 a4c:	40 5d       	subi	r20, 0xD0	; 208
 a4e:	4a 33       	cpi	r20, 0x3A	; 58
 a50:	18 f0       	brcs	.+6      	; 0xa58 <__DATA_REGION_LENGTH__+0x58>
 a52:	49 5d       	subi	r20, 0xD9	; 217
 a54:	31 fd       	sbrc	r19, 1
 a56:	40 52       	subi	r20, 0x20	; 32
 a58:	41 93       	st	Z+, r20
 a5a:	02 d0       	rcall	.+4      	; 0xa60 <__DATA_REGION_LENGTH__+0x60>
 a5c:	a9 f7       	brne	.-22     	; 0xa48 <__DATA_REGION_LENGTH__+0x48>
 a5e:	ea cf       	rjmp	.-44     	; 0xa34 <__DATA_REGION_LENGTH__+0x34>
 a60:	b4 e0       	ldi	r27, 0x04	; 4
 a62:	a6 95       	lsr	r26
 a64:	97 95       	ror	r25
 a66:	87 95       	ror	r24
 a68:	77 95       	ror	r23
 a6a:	67 95       	ror	r22
 a6c:	ba 95       	dec	r27
 a6e:	c9 f7       	brne	.-14     	; 0xa62 <__DATA_REGION_LENGTH__+0x62>
 a70:	00 97       	sbiw	r24, 0x00	; 0
 a72:	61 05       	cpc	r22, r1
 a74:	71 05       	cpc	r23, r1
 a76:	08 95       	ret
 a78:	9b 01       	movw	r18, r22
 a7a:	ac 01       	movw	r20, r24
 a7c:	0a 2e       	mov	r0, r26
 a7e:	06 94       	lsr	r0
 a80:	57 95       	ror	r21
 a82:	47 95       	ror	r20
 a84:	37 95       	ror	r19
 a86:	27 95       	ror	r18
 a88:	ba 95       	dec	r27
 a8a:	c9 f7       	brne	.-14     	; 0xa7e <__DATA_REGION_LENGTH__+0x7e>
 a8c:	62 0f       	add	r22, r18
 a8e:	73 1f       	adc	r23, r19
 a90:	84 1f       	adc	r24, r20
 a92:	95 1f       	adc	r25, r21
 a94:	a0 1d       	adc	r26, r0
 a96:	08 95       	ret

00000a98 <__prologue_saves__>:
 a98:	2f 92       	push	r2
 a9a:	3f 92       	push	r3
 a9c:	4f 92       	push	r4
 a9e:	5f 92       	push	r5
 aa0:	6f 92       	push	r6
 aa2:	7f 92       	push	r7
 aa4:	8f 92       	push	r8
 aa6:	9f 92       	push	r9
 aa8:	af 92       	push	r10
 aaa:	bf 92       	push	r11
 aac:	cf 92       	push	r12
 aae:	df 92       	push	r13
 ab0:	ef 92       	push	r14
 ab2:	ff 92       	push	r15
 ab4:	0f 93       	push	r16
 ab6:	1f 93       	push	r17
 ab8:	cf 93       	push	r28
 aba:	df 93       	push	r29
 abc:	cd b7       	in	r28, 0x3d	; 61
 abe:	de b7       	in	r29, 0x3e	; 62
 ac0:	ca 1b       	sub	r28, r26
 ac2:	db 0b       	sbc	r29, r27
 ac4:	0f b6       	in	r0, 0x3f	; 63
 ac6:	f8 94       	cli
 ac8:	de bf       	out	0x3e, r29	; 62
 aca:	0f be       	out	0x3f, r0	; 63
 acc:	cd bf       	out	0x3d, r28	; 61
 ace:	09 94       	ijmp

00000ad0 <__epilogue_restores__>:
 ad0:	2a 88       	ldd	r2, Y+18	; 0x12
 ad2:	39 88       	ldd	r3, Y+17	; 0x11
 ad4:	48 88       	ldd	r4, Y+16	; 0x10
 ad6:	5f 84       	ldd	r5, Y+15	; 0x0f
 ad8:	6e 84       	ldd	r6, Y+14	; 0x0e
 ada:	7d 84       	ldd	r7, Y+13	; 0x0d
 adc:	8c 84       	ldd	r8, Y+12	; 0x0c
 ade:	9b 84       	ldd	r9, Y+11	; 0x0b
 ae0:	aa 84       	ldd	r10, Y+10	; 0x0a
 ae2:	b9 84       	ldd	r11, Y+9	; 0x09
 ae4:	c8 84       	ldd	r12, Y+8	; 0x08
 ae6:	df 80       	ldd	r13, Y+7	; 0x07
 ae8:	ee 80       	ldd	r14, Y+6	; 0x06
 aea:	fd 80       	ldd	r15, Y+5	; 0x05
 aec:	0c 81       	ldd	r16, Y+4	; 0x04
 aee:	1b 81       	ldd	r17, Y+3	; 0x03
 af0:	aa 81       	ldd	r26, Y+2	; 0x02
 af2:	b9 81       	ldd	r27, Y+1	; 0x01
 af4:	ce 0f       	add	r28, r30
 af6:	d1 1d       	adc	r29, r1
 af8:	0f b6       	in	r0, 0x3f	; 63
 afa:	f8 94       	cli
 afc:	de bf       	out	0x3e, r29	; 62
 afe:	0f be       	out	0x3f, r0	; 63
 b00:	cd bf       	out	0x3d, r28	; 61
 b02:	ed 01       	movw	r28, r26
 b04:	08 95       	ret

00000b06 <_exit>:
 b06:	f8 94       	cli

00000b08 <__stop_program>:
 b08:	ff cf       	rjmp	.-2      	; 0xb08 <__stop_program>
